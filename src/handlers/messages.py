import asyncio
import base64
import requests
from aiogram import types, Bot
from ..config import TELEGRAM_BOT_TOKEN, MODELS, DEFAULT_MODEL, BOT_OPENROUTER_KEY
from ..openrouter import openrouter_generate, get_balance_sync, PaymentRequiredError
from ..keyboards import models_kb, edit_kb

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
sessions: dict[int, dict] = {}


async def handle_message(msg: types.Message, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_id = msg.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    sess = sessions.setdefault(
        user_id,
        {
            "images": [],
            "prompt": None,
            "selected_model": MODELS.get(DEFAULT_MODEL),
            "last_generated_image_b64": None,
            "awaiting_edit_prompt": False,
        },
    )
    text = (msg.text or "").strip()

    is_editing_flow = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω—è–∏ –∫–Ω–æ–ø–æ–∫

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞
    if sess.get("awaiting_edit_prompt"):
        sess["awaiting_edit_prompt"] = False
        if not text:
            await msg.reply(
                "–ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.",
                reply_markup=models_kb(),
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if sess.get("last_generated_image_b64"):
            sess["prompt"] = text
            is_editing_flow = True
        else:
            await msg.reply(
                "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=models_kb(),
            )
            return

    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    elif text in MODELS:
        model_full = MODELS[text]
        sess["selected_model"] = model_full
        await msg.answer(
            f"‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: <b>{text}</b>",
            parse_mode="HTML",
            reply_markup=models_kb(),
        )
        return

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    elif text == "üîë API –ö–ª—é—á":
        loop = asyncio.get_event_loop()
        balance = await loop.run_in_executor(None, get_balance_sync, BOT_OPENROUTER_KEY)
        balance_text = (
            f"–ë–∞–ª–∞–Ω—Å: {balance}" if balance else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å."
        )
        await msg.reply(balance_text, reply_markup=models_kb())
        return

    # –û–±—Ä–∞–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    elif msg.photo or (
        msg.document
        and msg.document.mime_type
        and msg.document.mime_type.startswith("image/")
    ):
        file_to_download = None
        caption_text = None

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if msg.photo:
            file_to_download = msg.photo[-1]
            caption_text = msg.caption
        elif msg.document and msg.document.mime_type.startswith("image/"):
            file_to_download = msg.document
            caption_text = msg.caption

        if not file_to_download:
            await msg.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=models_kb()
            )
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file = await bot.get_file(file_to_download.file_id)
        file_url = (
            f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"
        )
        try:
            img_bytes = requests.get(file_url, timeout=30).content
        except Exception:
            await msg.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=models_kb(),
            )
            return

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        b64 = base64.b64encode(img_bytes).decode("utf-8")
        sess["images"].append(b64)
        await msg.reply(
            f"üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–≤—Å–µ–≥–æ: {len(sess['images'])}). –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç.",
            reply_markup=models_kb(),
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç , –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø—Ä–æ–º—Ç
        if caption_text:
            sess["prompt"] = caption_text.strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç—É, —Ç–æ –∂–¥–µ–º
            return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ , –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º—Ç–æ–º
    elif text:
        sess["prompt"] = text

    # –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    if not sess.get("prompt"):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if msg.content_type not in ["text", "photo", "document"]:
            return
        await msg.reply("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç-–ø—Ä–æ–º–ø—Ç.", reply_markup=models_kb())
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if not BOT_OPENROUTER_KEY:
        await msg.reply(
            "‚ö†Ô∏è –ö–ª—é—á –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ config.py.", reply_markup=models_kb()
        )
        return

    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
    model_name = sess.get("selected_model") or MODELS.get(DEFAULT_MODEL)
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
    model_label = next(
        (label for label, id in MODELS.items() if id == model_name), model_name
    )

    await msg.reply(f"üé® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –º–æ–¥–µ–ª—å '{model_label}', –ø–æ–¥–æ–∂–¥–∏...")

    # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images_to_send = []
    if is_editing_flow:
        images_to_send = [sess["last_generated_image_b64"]]
    else:
        images_to_send = sess["images"]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    gen_func = openrouter_generate
    try:
        result_value = await asyncio.get_event_loop().run_in_executor(
            None,
            gen_func,
            sess["prompt"],
            images_to_send,
            model_name,
            BOT_OPENROUTER_KEY,
        )
    except PaymentRequiredError as e:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        await msg.reply(
            f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ OpenRouter. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}",
            reply_markup=models_kb(),
        )
        return
    except Exception:  # –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await msg.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=models_kb(),
        )
        return

    # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    sess["images"] = []
    sess["prompt"] = None
    sess["awaiting_edit_prompt"] = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç OpenRouter
    if isinstance(result_value, str):
        error_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {result_value}"

        if result_value.startswith("MODEL_ERROR:"):
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {result_value[12:]}"
        elif result_value.startswith("MODEL_REFUSED:"):
            error_message = f"‚ùå –ú–æ–¥–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {result_value[15:]}"
        elif result_value.startswith("MODEL_FINISH_REASON:"):
            error_message = f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {result_value[20:]}"
        elif result_value == "NO_IMAGE_RETURNED":
            error_message = "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞."
        elif result_value == "UNKNOWN_IMAGE_FORMAT":
            error_message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç –º–æ–¥–µ–ª–∏."
        elif result_value == "JSON_PARSE_ERROR":
            error_message = (
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON)."
            )

        await msg.reply(error_message, reply_markup=models_kb())
        return

    # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
    if not isinstance(result_value, bytes) or not result_value:
        await msg.reply(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=models_kb(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    sess["last_generated_image_b64"] = base64.b64encode(result_value).decode("utf-8")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await msg.reply_photo(
        types.BufferedInputFile(result_value, filename="result.png"),
        caption="‚ú® –ì–æ—Ç–æ–≤–æ!",
        reply_markup=edit_kb(),
    )
